@page "/professional/signup"
@using Farola.API
@using Farola.Database.Models
@using Farola.ViewModels
@using Refit
@inject IProfessionalClient ProfessionalAPI
@inject NavigationManager Navigation
@inject IConfiguration config

<h3>Регистрация</h3>

<InputFile OnChange="@OnFileUploadedAsync" />

<div id="previewImage" style="display: none;"></div>
<FluentStack>
     <FluentPersona Image="@(selectedImage == null ? new Icons.Filled.Size48.Person().ToDataUri(size: "40px", color: "white") : selectedImage)" ImageSize="80px"></FluentPersona>
<FluentButton Appearance="Appearance.Accent" Id="MyUploadStream">
    Загрузка фото
</FluentButton>
</FluentStack>

<FluentEditForm Model="@pro" OnSubmit="Submit">
    <FluentTextField Id="Surname" @bind-Value=pro.Surname Placeholder="Введите фамилию" Label="Фамилия" Required/>
    <FluentTextField Id="Name" @bind-Value=pro.Name Placeholder="Введите имя" Label="Имя" Required />
    <FluentTextField Id="PhoneNumber" @bind-Value=pro.Phone_number TextFieldType="TextFieldType.Tel" Placeholder="Введите номер телефона" Label="Номер телефона" Required />
    <FluentTextField Id="Email" @bind-Value=pro.Email TextFieldType="TextFieldType.Email" Spellcheck="true" Placeholder="Введите эл. почту" Label="Эл. почта" Required />
    <FluentTextField Id="Password" @bind-Value=pro.Password TextFieldType="TextFieldType.Password" Placeholder="Введите пароль" Label="Пароль" Required />
    <FluentTextField Id="Area" @bind-Value=pro.Area Placeholder="Введите населённый пункт" Label="Населённый пункт" />
    <FluentCombobox Id="Specialization" Label="Специализация"
                    Items="@specOptions"
                    TOption="Option<string>"
                    OptionText="@(s => s.Text)"
                    OptionValue="@(s => s.Value)"
                    OptionSelected="@(s => s.Selected)"
                    @bind-SelectedOption="@spec" />
    <FluentTextField Id="Profession" @bind-Value=pro.Profession Placeholder="Введите наименование профессии" Label="Профессия" Required />
    <FluentTextArea Id="Information" @bind-Value=pro.Information Placeholder="Введите информацию о себе" Label="Подробная информация" />

    <FluentButton Id="SubmitBtn" Type="ButtonType.Submit">Зарегистрироваться</FluentButton>
</FluentEditForm>

@code {
    private RegProfessional pro = new();
    private IEnumerable<Specialization>? specs;
    private List<Option<string>>? specOptions;
    private Option<string>? spec = null;
    FluentInputFile? myFileByStream = default!;
    int? progressPercent;
    string? progressTitle;

    List<string> Files = new();

    InputFileChangeEventArgs photo;

    private string? selectedImage;
    private string selectedImagePath = "images/professionals/placeholder.jpg";

    protected override async Task OnInitializedAsync()
    {
        specs = await ProfessionalAPI.GetSpecializations();

        specOptions = specs?
        .Select(p => new Option<string>
            {
                Value = p.Id.ToString(),
                Text = p.Name
            }).ToList();
    }

    async Task OnFileUploadedAsync(InputFileChangeEventArgs file)
    {
        photo = file;

        if (file.File != null)
        {
            using var ms = new MemoryStream();
            await file.File.OpenReadStream().CopyToAsync(ms);
            var imageBytes = ms.ToArray();
            selectedImage = $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";
            selectedImagePath = $"{Navigation.BaseUri}/images/temp/{Path.GetRandomFileName()}.jpg";
        }
    }

    void OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        progressPercent = myFileByStream!.ProgressPercent;
        progressTitle = myFileByStream!.ProgressTitle;
    }

    private async Task Submit()
    {
        using var stream = photo.File.OpenReadStream();
        var streamPart = new StreamPart(stream, Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(photo.File.Name)), "image/jpeg");

        //pro.Specialization = int.Parse(spec.Value);
        //var user = await ProfessionalAPI.SignUp(pro);
        // if (user != null)
        // {
        await ProfessionalAPI.SaveImage(15, streamPart);
        // }
        //Navigation.NavigateTo("/professional/all/search");
    }
}
