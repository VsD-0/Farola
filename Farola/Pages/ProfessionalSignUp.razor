@page "/professional/signup"
@using Farola.API
@using Farola.Database.Models
@using Farola.ViewModels
@using Refit
@inject IProfessionalClient ProfessionalAPI
@inject NavigationManager Navigation
@inject IConfiguration config

<h3>Регистрация</h3>

<FluentInputFile @ref="@myFileByStream"
                 AnchorId="MyUploadStream"
                 DragDropZoneVisible="false"
                 Mode="InputFileMode.Stream"
                 Accept=".jpg"
                 OnFileUploaded="@OnFileUploadedAsync"
                 OnCompleted="@OnCompleted" />

<FluentProgress Min="0" Max="100" Value="@progressPercent" Visible="@(progressPercent > 0)" />
<FluentLabel Alignment="HorizontalAlignment.Center">
    @progressTitle
</FluentLabel>

<FluentButton Appearance="Appearance.Accent" Id="MyUploadStream">
    Загрузка фото
</FluentButton>

@if (Files.Any())
{
    <h4>File(s) uploaded:</h4>
    <ul>
        @foreach (var file in Files)
        {
            <li>
                @file
            </li>
        }
    </ul>
}

<FluentEditForm Model="@pro" OnSubmit="Submit">
    <FluentTextField Id="Surname" @bind-Value=pro.Surname Placeholder="Введите фамилию" Label="Фамилия" Required/>
    <FluentTextField Id="Name" @bind-Value=pro.Name Placeholder="Введите имя" Label="Имя" Required />
    <FluentTextField Id="PhoneNumber" @bind-Value=pro.Phone_number TextFieldType="TextFieldType.Tel" Placeholder="Введите номер телефона" Label="Номер телефона" Required />
    <FluentTextField Id="Email" @bind-Value=pro.Email TextFieldType="TextFieldType.Email" Spellcheck="true" Placeholder="Введите эл. почту" Label="Эл. почта" Required />
    <FluentTextField Id="Password" @bind-Value=pro.Password TextFieldType="TextFieldType.Password" Placeholder="Введите пароль" Label="Пароль" Required />
    <FluentTextField Id="Area" @bind-Value=pro.Area Placeholder="Введите населённый пункт" Label="Населённый пункт" />
    <FluentCombobox Id="Specialization" Label="Специализация"
                    Items="@specOptions"
                    TOption="Option<string>"
                    OptionText="@(s => s.Text)"
                    OptionValue="@(s => s.Value)"
                    OptionSelected="@(s => s.Selected)"
                    @bind-SelectedOption="@spec" />
    <FluentTextField Id="Profession" @bind-Value=pro.Profession Placeholder="Введите наименование профессии" Label="Профессия" Required />
    <FluentTextArea Id="Information" @bind-Value=pro.Information Placeholder="Введите информацию о себе" Label="Подробная информация" />

    <FluentButton Id="SubmitBtn" Type="ButtonType.Submit">Зарегистрироваться</FluentButton>
</FluentEditForm>

@code {
    private RegProfessional pro = new();
    private IEnumerable<Specialization>? specs;
    private List<Option<string>>? specOptions;
    private Option<string>? spec = null;
    FluentInputFile? myFileByStream = default!;
    int? progressPercent;
    string? progressTitle;

    List<string> Files = new();

    protected override async Task OnInitializedAsync()
    {
        specs = await ProfessionalAPI.GetSpecializations();

        specOptions = specs?
        .Select(p => new Option<string>
            {
                Value = p.Id.ToString(),
                Text = p.Name
            }).ToList();
    }

    async Task OnFileUploadedAsync(FluentInputFileEventArgs file)
    {
        progressPercent = file.ProgressPercent;
        progressTitle = file.ProgressTitle;

        var fileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
        var filePath = Path.Combine(config.GetValue<string>("FileStorage")!, "pro", fileName);

        Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, "pro"));
        var p = Path.Combine(config.GetValue<string>("FileStorage")!) + "\\pro";
        var a = Directory.Exists(p);

        Files.Add(filePath);

        await using FileStream fs = new(filePath, FileMode.Create);
        await file.Stream!.CopyToAsync(fs);
        await file.Stream!.DisposeAsync();
        new StreamPart(file.Stream, fileName, "image/jpeg");
    }

    void OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        progressPercent = myFileByStream!.ProgressPercent;
        progressTitle = myFileByStream!.ProgressTitle;
    }

    private async Task Submit()
    {
        pro.Specialization = int.Parse(spec.Value);
        await ProfessionalAPI.SignUp(pro);
        Navigation.NavigateTo("/professional/all/search");
    }
}
