@using Farola.API
@using Farola.Domain.Models
@using Farola.Infrastructure.Handlers
@using Farola.Infrastructure.Models
@using Farola.ViewModels
@using Refit
@using System.IdentityModel.Tokens.Jwt

@inject IUserClient UserAPI
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

@page "/user/signin"

<FluentStack HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center" Orientation="Orientation.Vertical">
    <FluentLabel Typo="Typography.H2">Авторизация</FluentLabel>
    <FluentCard Width="400px" Height="400px">
        <FluentLabel>@error_general</FluentLabel>
        <FluentTextField @bind-Value=email TextFieldType="TextFieldType.Email" Spellcheck="true" Placeholder="Введите эл. почту" Label="Эл. почта"/>
        <FluentLabel>@error_email</FluentLabel>
        <FluentTextField @bind-Value=password TextFieldType="TextFieldType.Password" Placeholder="Введите пароль" Label="Пароль"/>
        <FluentLabel>@error_password</FluentLabel>
        <FluentButton OnClick="Login">Войти</FluentButton>
    </FluentCard>
</FluentStack>

@code {
    private string Email { get; set; }
    private string Password { get; set; }
    private string Error_email { get; set; }
    private string Error_general { get; set; }
    private string Error_password;

    private string? role = "2";
    private string? clientId = "0";

    private async void Login()
    {
        try
        {
            string token = await UserAPI.SignIn(new AuthModel
            {
                    Email = Email,
                    Password = Password
            });
            TokenStorage.Token = token;
            var tokenHandler = new JwtSecurityTokenHandler();

            var jwtToken = tokenHandler.ReadJwtToken(TokenStorage.Token);

            var roleClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "role");
            role = roleClaim is not null ? roleClaim.Value : "2";

            var idClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "nameid");
            clientId = idClaim is not null ? idClaim.Value : "0";
            CurrentUser.Id = clientId;
            CurrentUser.Role = role;

            Navigation.NavigateTo("/professional/all/search");
        }
        catch (ValidationApiException ex)
        {
            Error_email = error_password = Error_general = "";
            var errors = ex.Content is not null ? ex.Content.Errors : new();

            foreach (var item in errors.Keys)
            {
                switch (item)
                {
                    case "Email":
                        Error_email = errors[item].First();
                        break;
                    case "Password":
                        Error_password = errors[item].First();
                        break;
                    case "General":
                        Error_general = errors[item].First();
                        break;
                    default:
                        await JsRuntime.InvokeVoidAsync("alert", ex);
                        break;
                }
            }
        }
        catch (Exception ex) { await JsRuntime.InvokeVoidAsync("alert", ex); }
    }
}
