@using Farola.API
@using Farola.Domain.Models
@using Farola.Infrastructure.Handlers
@using Farola.Infrastructure.Models
@using Farola.ViewModels
@using Refit
@using System.IdentityModel.Tokens.Jwt

@inject IUserClient UserAPI
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

@page "/user/signin"

<FluentLayout Style="align-items: center; align-content:center" >
    <FluentGrid Justify="JustifyContent.Center">
        <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
            <FluentLabel Typo="Typography.H2">Авторизация</FluentLabel>
        </FluentGridItem>
        <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
            <FluentCard Width="400px" Height="400px">
                <FluentGrid>
                    <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
                        <FluentLabel>@Error_general</FluentLabel>
                    </FluentGridItem>
                    <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
                        <FluentTextField @bind-Value=Email TextFieldType="TextFieldType.Email" Spellcheck="true" Placeholder="Введите эл. почту" Label="Эл. почта" />
                    </FluentGridItem>
                    <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
                        <FluentLabel>@Error_email</FluentLabel>
                    </FluentGridItem>
                    <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
                        <FluentTextField @bind-Value=Password TextFieldType="TextFieldType.Password" Placeholder="Введите пароль" Label="Пароль" />
                    </FluentGridItem>
                    <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
                        <FluentLabel>@Error_password</FluentLabel>
                    </FluentGridItem>
                    <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
                        <FluentButton OnClick="Login">Войти</FluentButton>
                    </FluentGridItem>
                </FluentGrid>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>
</FluentLayout>

@code {
    private string Email { get; set; }
    private string Password { get; set; }
    private string Error_email { get; set; }
    private string Error_general { get; set; }
    private string Error_password;

    private string? role = "2";
    private string? clientId = "0";

    private async void Login()
    {
        try
        {
            if (String.IsNullOrEmpty(await JsRuntime.InvokeAsync<string>("getToken")))
            {
                string token = await UserAPI.SignIn(new AuthModel
                    {
                        Email = Email,
                        Password = Password
                    });

                await JsRuntime.InvokeVoidAsync("setToken", token);

                TokenStorage.Token = token;
                var tokenHandler = new JwtSecurityTokenHandler();

                var jwtToken = tokenHandler.ReadJwtToken(await JsRuntime.InvokeAsync<string>("getToken"));

                var roleClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "role");
                role = roleClaim is not null ? roleClaim.Value : "2";

                var idClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "nameid");
                clientId = idClaim is not null ? idClaim.Value : "0";
                CurrentUser.Id = clientId;
                CurrentUser.Role = role;
                var user = await UserAPI.GetUserById(int.Parse(clientId));
                CurrentUser.UserName = $"{user.Surname} {user.Name} {user.Patronymic}";

                Navigation.NavigateTo("/");
            }
            else
            {
                var token = await JsRuntime.InvokeAsync<string>("getToken");
                TokenStorage.Token = token;
            }
        }
        catch (ValidationApiException ex)
        {
            Error_email = Error_password = Error_general = "";
            var errors = ex.Content is not null ? ex.Content.Errors : new();

            foreach (var item in errors.Keys)
            {
                switch (item)
                {
                    case "Email":
                        Error_email = errors[item].First();
                        break;
                    case "Password":
                        Error_password = errors[item].First();
                        break;
                    case "General":
                        Error_general = errors[item].First();
                        break;
                    default:
                        await JsRuntime.InvokeVoidAsync("alert", ex);
                        break;
                }
            }
        }
        catch (Exception ex) { await JsRuntime.InvokeVoidAsync("alert", ex); }
    }
}
