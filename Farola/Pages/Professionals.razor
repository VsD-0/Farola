@page "/professional/{specialization}/{search}"
@using Farola.API
@using Farola.Database.Models
@using Farola.Domain.Models
@using Farola.Infrastructure.Handlers
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inject HttpClient Http
@inject IProfessionalClient ProfessionalAPI
@inject IStatementClient StatementAPI

<PageTitle>Специалисты</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
<h1>Специалисты</h1>

@if (pros != null)
{
    @if (pros?.Items?.Count == 0)
    {
        <FluentStack Orientation="Orientation.Vertical">
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentSearch @bind-Value="@profession" Placeholder="Введите необходимого специалиста" Label="Профессия" />
                <FluentButton OnClick="Search">Найти</FluentButton>
            </FluentStack>
        <p><em>Специалисты отсутствуют</em></p>
        </FluentStack>
    }
    else
    {
        <FluentStack Orientation="Orientation.Vertical">
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentSearch @bind-Value="@profession" Placeholder="Введите необходимого специалиста" Label="Профессия" />
                <FluentButton OnClick="Search">Найти</FluentButton>
            </FluentStack>
            @foreach (var item in pros?.Items)
            {
                <FluentCard Height="175px">
                    <FluentStack VerticalAlignment="VerticalAlignment.Center">
                        <FluentPersona Image="@(new Icons.Filled.Size48.Person().ToDataUri(size: "40px", color: "white"))" ImageSize="80px"></FluentPersona>
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="2">
                            <FluentNavLink Href="@(GetProLink(item.Id))" IconColor="Color.Accent" Style="font-size: 24px; font-weight: bold">@item.Profession</FluentNavLink>
                            <FluentLabel Typo="Typography.Body">@item.Specialization</FluentLabel>
                            <FluentSpacer/>
                            <FluentLabel Typo="Typography.Body">@item.Surname @item.Name</FluentLabel>
                            <FluentLabel Typo="Typography.Body">@item.Email</FluentLabel>
                            <FluentSpacer />
                            <FluentLabel Typo="Typography.Body">@item.Area</FluentLabel>
                        </FluentStack>
                        <FluentLabel Typo="Typography.Body">@item.Information</FluentLabel>
                    </FluentStack>
                </FluentCard>
            }
        </FluentStack>

        <FluentStack Orientation="Orientation.Horizontal">
            <FluentButton OnClick="Preview">Назад</FluentButton>
            <FluentLabel>@pros.Pagination.CurrentPage</FluentLabel>
            <FluentButton OnClick="Next">Вперёд</FluentButton>
        </FluentStack>   
        }
    }
else
{
    <FluentProgressRing />
}
</FluentStack>

@code {
    private FluentMenuButton menubutton = new();

    private PaginatedResult<UserDTO> pros;
    private IEnumerable<Specialization> specs;
    private List<Option<string>>? specOptions;
    private Option<string>? spec = null;
    private int pageNumber = 1;
    private string? profession = null;



    [Parameter]
    public string search { get; set; }
    [Parameter]
    public string Specialization { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (search != "search")
            profession = search;
        if (Specialization != "all")
            pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, profession, Specialization);
        else
            pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, profession, null);

        specs = await ProfessionalAPI.GetSpecializations();

        specOptions = specs?
        .Select(p => new Option<string>
        {
            Value = p.Id.ToString(),
            Text = p.Name
        }).ToList();

        specOptions.Insert(0, new Option<string>
        {
            Value = "0",
            Text = "Показать все",
            Selected = true
        });
    }

    protected override async Task OnParametersSetAsync()
    {
        if (search != "search")
            profession = search;

        if (Specialization != "all")
            pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, profession, Specialization);
        else
            pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, profession, null);
    }

    private string GetProLink(int? proId)
    {
        return proId != null ? $"/professional/{proId}" : "#";
    }

    private async Task Search()
    {
        pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, profession, Specialization);
    }

    private async Task Preview()
    {
        if (pros.Pagination.CurrentPage > 1)
        {
            --pageNumber;
            pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, profession, spec?.Value);
        }
    }

    private async Task Next()
    {
        if (pros.Pagination.TotalPages != pros.Pagination.CurrentPage)
        {
            ++pageNumber;
            pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, profession, spec?.Value);
        }
    }
}
