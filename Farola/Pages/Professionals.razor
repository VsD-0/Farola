@page "/professional/{specialization}/{search}"
@using Farola.API
@using Farola.Database.Models
@using Farola.Domain.Models
@using Farola.Infrastructure.Handlers
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inject HttpClient Http
@inject IProfessionalClient ProfessionalAPI
@inject IStatementClient StatementAPI

<PageTitle>Специалисты</PageTitle>

<FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
<FluentLabel Typo="Typography.H1" Alignment="HorizontalAlignment.Center">Специалисты</FluentLabel>

@if (pros != null)
{
    @if (pros?.Items?.Count == 0)
    {
        <FluentGrid>
            <FluentGridItem xxl="9" xl="9" lg="9" md="9" sm="9" xs="9">
                <FluentSearch @bind-Value="@profession" Placeholder="Введите необходимого специалиста" Style="font-size:18px; width: 100%"/>
            </FluentGridItem>
            <FluentGridItem xxl="3" xl="3" lg="3" md="3" sm="3" xs="3">
                    <FluentButton Appearance="Appearance.Accent" OnClick="Search">Найти</FluentButton>
            </FluentGridItem>
            <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12">
                <p><em>Специалисты отсутствуют</em></p>
            </FluentGridItem>
        </FluentGrid>
    }
    else
    {
        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                <FluentGrid Style="width: 100%" Justify="JustifyContent.Center">
                <FluentGridItem xxl="10" xl="10" lg="10" md="10" sm="10" xs="10" Justify="JustifyContent.Center">
                    <FluentSearch @bind-Value="@profession" Placeholder="Введите необходимого специалиста" Style="font-size:18px; width: 100%" />
                </FluentGridItem>
                    <FluentGridItem xxl="2" xl="2" lg="2" md="2" sm="2" xs="2" Justify="JustifyContent.Center">
                        <FluentButton Appearance="Appearance.Accent" Style="width: 60%" OnClick="Search">Найти</FluentButton>
                </FluentGridItem>
            </FluentGrid>
            <FluentGrid AdaptiveRendering=true Justify="JustifyContent.Center">
            @foreach (var item in pros?.Items)
            {
                    <FluentGridItem xxl="3" xl="6" lg="6" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
                    <FluentCard>
                        <FluentGrid Spacing="1">
                            <FluentGridItem xxl="2" xl="2" lg="2" md="2" sm="2" xs="2" Justify="JustifyContent.FlexStart">
                                <FluentPersona Image="@(new Icons.Filled.Size48.Person().ToDataUri(size: "60px", color: "white"))" ImageSize="80px"></FluentPersona>
                            </FluentGridItem>
                            <FluentGridItem xxl="10" xl="10" lg="10" md="10" sm="10" xs="10" Justify="JustifyContent.FlexStart">
                                <FluentStack Orientation="Orientation.Vertical">
                                    <FluentNavLink Href="@(GetProLink(item.Id))" IconColor="Color.Accent" Style="font-size: 24px; font-weight: bold">@item.Profession</FluentNavLink>
                                    <FluentLabel Typo="Typography.Subject">@item.Specialization</FluentLabel>
                                </FluentStack>
                            </FluentGridItem>
                            <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.FlexStart">
                                        <FluentLabel Typo="Typography.H5">@item.Surname @item.Name</FluentLabel>
                            </FluentGridItem>
                            <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.FlexStart">
                                        <FluentLabel Typo="Typography.Subject">@item.Email</FluentLabel>
                            </FluentGridItem>
                            @if(item.Area != null)
                            {
                                <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.FlexStart">
                                            <FluentLabel Typo="Typography.Subject">@item.Area</FluentLabel>
                                </FluentGridItem>
                            }
                            <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.FlexStart">
                                        <FluentLabel Typo="Typography.Subject">@item.Information</FluentLabel>
                            </FluentGridItem>
                        </FluentGrid>
                    </FluentCard>
                </FluentGridItem>
            }
            </FluentGrid>
            <FluentGrid Style="width: 100%">
                <FluentGridItem xxl="6" xl="6" lg="6" md="6" sm="6" xs="6" Justify="JustifyContent.FlexStart">
                    <FluentStack Orientation="Orientation.Horizontal">
                        @if (pros.Pagination.CurrentPage != 1)
                        {
                            <FluentButton IconStart="@(new Icons.Filled.Size16.CaretLeft())" OnClick="Preview"></FluentButton>
                        }
                        <FluentLabel Typo="Typography.H3">@pros.Pagination.CurrentPage</FluentLabel>
                        @if (pros.Pagination.TotalPages != pros.Pagination.CurrentPage)
                        {
                            <FluentButton IconEnd="@(new Icons.Filled.Size16.CaretRight())" OnClick="Next"></FluentButton>
                        }
                    </FluentStack>
                </FluentGridItem>
                <FluentGridItem xxl="6" xl="6" lg="6" md="6" sm="6" xs="6" Justify="JustifyContent.FlexEnd">
                        <FluentLabel Typo="Typography.Subject">Количество страниц: @pros.Pagination.TotalPages</FluentLabel>
                    </FluentGridItem>
            </FluentGrid>
        </FluentStack>
        }
    }
else
{
    <FluentProgressRing />
}
</FluentStack>

@code {
    private FluentMenuButton menubutton = new();

    private PaginatedResult<UserDTO> pros;
    private IEnumerable<Specialization> specs;
    private List<Option<string>>? specOptions;
    private Option<string>? spec = null;
    private int pageNumber = 1;
    private string? profession = null;



    [Parameter]
    public string search { get; set; }
    [Parameter]
    public string Specialization { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (search != "search")
            profession = search;
        if (Specialization != "all")
            pros = await ProfessionalAPI.GetProfessionals(1, 4, profession, Specialization);
        else
            pros = await ProfessionalAPI.GetProfessionals(1, 4, profession, null);

        specs = await ProfessionalAPI.GetSpecializations();

        specOptions = specs?
        .Select(p => new Option<string>
        {
            Value = p.Id.ToString(),
            Text = p.Name
        }).ToList();

        specOptions.Insert(0, new Option<string>
        {
            Value = "0",
            Text = "Показать все",
            Selected = true
        });
    }

    protected override async Task OnParametersSetAsync()
    {
        if (search != "search")
            profession = search;

        if (Specialization != "all")
            pros = await ProfessionalAPI.GetProfessionals(1, 4, profession, Specialization);
        else
            pros = await ProfessionalAPI.GetProfessionals(1, 4, profession, null);
    }

    private string GetProLink(int? proId)
    {
        return proId != null ? $"/professional/{proId}" : "#";
    }

    private async Task Search()
    {
        pros = await ProfessionalAPI.GetProfessionals(1, 4, profession, Specialization);
    }

    private async Task Preview()
    {
        if (pros.Pagination.CurrentPage > 1)
        {
            --pageNumber;
            pros = await ProfessionalAPI.GetProfessionals(pageNumber, 4, profession, spec?.Value);
        }
    }

    private async Task Next()
    {
        if (pros.Pagination.TotalPages != pros.Pagination.CurrentPage)
        {
            ++pageNumber;
            pros = await ProfessionalAPI.GetProfessionals(pageNumber, 4, profession, spec?.Value);
        }
    }
}
