@page "/professional/all"
@using Farola.API
@using Farola.Database.Models
@using Farola.Domain.Models
@inject HttpClient Http
@inject IProfessionalClient ProfessionalAPI

<PageTitle>Специалисты</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
<h1>Специалисты</h1>

@if (pros == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentSearch @bind-Value=prof Placeholder="Введите необходимого специалиста" Label="Профессия"/>
                <FluentCombobox @bind-Value=spec Label="Специализация" Items="@specs" OptionText="@(s => s.Name)" OptionValue="@(s => s.Id.ToString())"/>
            <FluentButton OnClick="Search">Найти</FluentButton>
        </FluentStack>
        @foreach (var item in pros.Items)
        {
            <FluentCard Height="175px">
                <FluentStack VerticalAlignment="VerticalAlignment.Center">
                    <FluentPersona Image="@(new Icons.Filled.Size48.Person().ToDataUri(size: "40px", color: "white"))" ImageSize="80px"></FluentPersona>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="2"> 
                        <FluentLabel Typo="Typography.H3">@item.Profession</FluentLabel>
                        <FluentLabel Typo="Typography.Body">@item.Specialization</FluentLabel>
                        <FluentSpacer/>
                        <FluentLabel Typo="Typography.Body">@item.Surname @item.Name</FluentLabel>
                        <FluentLabel Typo="Typography.Body">@item.Email</FluentLabel>
                        <FluentSpacer />
                        <FluentLabel Typo="Typography.Body">@item.Area</FluentLabel>
                    </FluentStack>
                    <FluentLabel Typo="Typography.Body">@item.Information</FluentLabel>
                </FluentStack>
            </FluentCard>
        }
    </FluentStack>

    <FluentStack Orientation="Orientation.Horizontal">
        <FluentButton OnClick="Preview">Назад</FluentButton>
        <FluentLabel>@pros.Pagination.CurrentPage</FluentLabel>
        <FluentButton OnClick="Next">Вперёд</FluentButton>
    </FluentStack>   
}
</FluentStack>

@code {
    private FluentMenuButton menubutton = new();

    private PaginatedResult<UserDTO> pros;
    private IEnumerable<Specialization> specs;
    private int pageNumber = 1;
    private string? prof = null;
    private string? spec = null;

    protected override async Task OnInitializedAsync()
    {
        pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, prof, spec);
        specs = await ProfessionalAPI.GetSpecializations();
    }

    private async Task Search()
    {
        pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, prof, spec);
    }

    private async Task Preview()
    {
        if (pros.Pagination.CurrentPage > 1)
        {
            --pageNumber;
            pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, prof, spec);
        }
    }

    private async Task Next()
    {
        if (pros.Pagination.TotalPages != pros.Pagination.CurrentPage)
        {
            ++pageNumber;
            pros = await ProfessionalAPI.GetProfessionals(pageNumber, 2, prof, spec);
        }
    }
}
