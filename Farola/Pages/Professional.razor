@page "/professional/{proId}"
@using Farola.API
@using Farola.Database.Models
@using Farola.Domain.Models
@using Farola.Infrastructure.Handlers
@using System.IdentityModel.Tokens.Jwt
@inject IProfessionalClient ProfessionalAPI
@inject IStatementClient StatementAPI
@inject IFavoriteClient FavoriteAPI
@inject IUserClient UserAPI
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IToastService ToastService

@if (User != null)
{
    <PageTitle>@User.Surname @User.Name @User.Patronymic</PageTitle>
    <FluentGrid AdaptiveRendering="true" Spacing="1">
        <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
            <FluentLabel Typo="Typography.H2">@User.Profession</FluentLabel>
        </FluentGridItem>
        <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
            <FluentLabel Typo="Typography.H5">@User.Specialization</FluentLabel>
        </FluentGridItem>
        <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.Center">
            <FluentSpacer/>
        </FluentGridItem>
        <FluentGridItem xxl="6" xl="6" lg="6" md="12" sm="12" xs="12">
            <FluentGrid AdaptiveRendering="true">
                <FluentGridItem xxl="2" xl="2" lg="2" md="2" sm="2" xs="2">
                    <FluentPersona Image="@(new Icons.Filled.Size48.Person().ToDataUri(size: "40px", color: "white"))" ImageSize="80px"></FluentPersona>
                </FluentGridItem>
                <FluentGridItem xxl="10" xl="10" lg="10" md="10" sm="10" xs="10" Justify="JustifyContent.FlexStart">
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Typo="Typography.H5">@User.Surname @User.Name @User.Patronymic</FluentLabel>
                        @if (role == "2")
                        {
                            @if (isFavorite)
                            {
                                <FluentButton IconStart="@(new Icons.Filled.Size20.Heart())" OnClick="ChangeFavoriteStatus"></FluentButton>
                            }
                            else
                            {
                                <FluentButton IconStart="@(new Icons.Regular.Size20.Heart())" OnClick="ChangeFavoriteStatus"></FluentButton>
                            }
                        }
                    </FluentStack>
                 </FluentGridItem>
                <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.FlexStart">
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Typo="Typography.Subject">Рейтинг: @(Rating ?? "Отсутствует")</FluentLabel>
                        @if (Rating != null)
                        {
                            <FluentIcon Value="@(new Icons.Filled.Size20.StarEmphasis())" Title="StarEmphasis" Color="Color.Accent" />
                        }
                    </FluentStack>
                </FluentGridItem>
                <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12" Justify="JustifyContent.FlexStart">
                    <FluentLabel Typo="Typography.Subject">Количество оценок: @(Reviews.Count() == 0 ? "0" : Reviews.Count())</FluentLabel>
                </FluentGridItem>
                <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12">
                    @if (role == "2")
                    {
                        <FluentButton Appearance="Appearance.Accent" Disabled=@existStatement OnClick="@(p => SendStatement())">@(!existStatement ? "Подать заявку" : "У Вас уже есть активная заявка")</FluentButton>
                    }
                </FluentGridItem>
                <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12">
                    <FluentLabel Typo="Typography.Subject">@User.Information</FluentLabel>
                </FluentGridItem>
            </FluentGrid>
        </FluentGridItem>
        <FluentGridItem xxl="6" xl="6" lg="6" md="12" sm="12" xs="12">
            <FluentGrid AdaptiveRendering="true">
                <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12">
                    <FluentLabel Typo="Typography.H5">Отзывы:</FluentLabel>
                </FluentGridItem>
                <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12">

                @if (Reviews != null)
                {
                    if (Reviews.Count() != 0)
                    {
                            <FluentGrid AdaptiveRendering="true">
                            @foreach (var item in Reviews)
                            {
                                    <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12">
                                    <FluentCard>
                                        <FluentGrid AdaptiveRendering="true">
                                            <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12">
                                                <FluentLabel>@item.Client.Surname @item.Client.Name @item.Client.Patronymic</FluentLabel>
                                            </FluentGridItem>
                                            <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12">
                                                <FluentStack Orientation="Orientation.Horizontal">
                                                <FluentLabel>@item.Grade</FluentLabel>
                                                        @for (int i = 0; i < Math.Ceiling(item.Grade); i++)
                                                        {
                                                            if (i == Math.Floor(item.Grade))
                                                            {
                                                                <FluentIcon Value="@(new Icons.Filled.Size20.StarHalf())" Title="StarHalf" />
                                                            }
                                                            else if (i == 4)
                                                            {
                                                                <FluentIcon Value="@(new Icons.Filled.Size20.StarEmphasis())" Title="StarEmphasis" Color="Color.Accent" />
                                                            }
                                                            else
                                                            {
                                                                <FluentIcon Value="@(new Icons.Filled.Size20.Star())" Title="Star" Color="Color.Accent" />
                                                            }
                                                        }
                                                </FluentStack>
                                            </FluentGridItem>
                                            <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12">
                                                <FluentLabel>@item.Text</FluentLabel>
                                            </FluentGridItem>
                                            <FluentGridItem xxl="12" xl="12" lg="12" md="12" sm="12" xs="12">
                                                <FluentLabel>@item.DateAdded</FluentLabel>
                                            </FluentGridItem>
                                        </FluentGrid>
                                    </FluentCard>
                                </FluentGridItem>
                            }
                        </FluentGrid>
                    }
                    else
                    {
                            <FluentLabel>Отзывы отсутствуют</FluentLabel>
                    }
                }
                else
                {
                        <FluentProgressRing/>
                }
                </FluentGridItem>
            </FluentGrid>
        </FluentGridItem>
    </FluentGrid>
}
else
{
    <PageTitle>Пользователь не найден</PageTitle>
    <FluentLabel>Пользователь не найден</FluentLabel>
}

@code {
    [Parameter]
    public string proId { get; set; }

    public UserDTO? User { get; set; }
    public string? Rating { get; set; }
    public List<ReviewViewModel> Reviews { get; set; }

    private string? role;
    private string? clientId = "0";
    private bool existStatement;
    private bool isFavorite;

    bool? canceled;

    protected override async Task OnInitializedAsync()
    {
        User = await ProfessionalAPI.GetProfessional(int.Parse(proId));
        if (User != null)
        {
            Reviews = (await ProfessionalAPI.GetReviewsByUser(User.Id)).ToList();
            if (Reviews.Any())
            {
                float totalGrade = 0;
                foreach (var review in Reviews)
                {
                    totalGrade += review.Grade;
                }
                Rating = (totalGrade / Reviews.Count).ToString();
            }
        }

        if (!String.IsNullOrEmpty(await JSRuntime.InvokeAsync<string>("getToken")))
        {
            var tokenHandler = new JwtSecurityTokenHandler();

            // Получение токена
            var jwtToken = tokenHandler.ReadJwtToken(await JSRuntime.InvokeAsync<string>("getToken"));

            // Получение роли из токена
            var roleClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "role");
            role = roleClaim is not null ? roleClaim.Value : "2";

            var idClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "nameid");
            clientId = idClaim is not null ? idClaim.Value : "0";

            if (role == "2")
            {
                existStatement = await StatementAPI.IsExistActive(int.Parse(clientId), User.Id);
                isFavorite = await FavoriteAPI.IsFavorite(User.Id, int.Parse(clientId));
            }
        }
    }

    private async Task SendStatement()
    {
        var dialog = await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
            {
                Content = new()
                {
                    Title = "Подтверждение",
                    MarkupMessage = new MarkupString("<h4>Вы уверены, что хотите подать заявку?</h4>"),
                    Icon = new Icons.Regular.Size24.Warning(),
                    IconColor = Color.Warning,
                },
                PrimaryAction = "Да",
                SecondaryAction = "Нет",
                Width = "300px"
            });
        var result = await dialog.Result;
        canceled = result.Cancelled;
        if (canceled == false)
        {
            await StatementAPI.SendStatement(new ViewModels.SendStatement { ClientId = int.Parse(clientId), ProfessionalId = User.Id });
            existStatement = true;
            ToastService.ShowSuccess("Заявка подана");
        }
    }
    private async Task ChangeFavoriteStatus()
    {
        if (isFavorite)
        {
            await FavoriteAPI.DeleteFavorite(User.Id, int.Parse(clientId));
            isFavorite = false;
        }
        else
        {
            await FavoriteAPI.AddFavorite(User.Id, int.Parse(clientId));
            isFavorite = true; 
        }
    }
}