@using Farola.API
@using Farola.Database.Models
@using Farola.Domain.Models
@using Farola.Infrastructure.Handlers
@using System.IdentityModel.Tokens.Jwt
@using Farola.Infrastructure.Models
@inject IProfessionalClient ProfessionalAPI
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@* To get access to all Fluent UI System icons, install the Microsoft.FluentUI.AspNetCore.Compoents.Icon package *@
@* See all the diffeent ways on how to use icons at https://www.fluentui-blazor.net/Icon *@

<nav>
    <FluentNavMenu Width="250" Collapsible="true" Title="Custom navigation menu" @bind-Expanded=isOpen>
        <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icon.FromImageUrl("/images/home.svg")" IconColor="Color.Accent" Style="font-size: 1.4em">Главная</FluentNavLink>
        <FluentNavLink Href="/professional/all/search" Icon="@Icon.FromImageUrl("/images/specializations.svg")" IconColor="Color.Accent" Style="font-size: 1.4em">Специалисты</FluentNavLink>
        @if (specsList != null && isOpen)
        {
            <FluentListbox TOption="SpecStat"
            Items="@specsList"
            Id="spec-listbox"
            Height="150%"
            Multiple=false
            OptionValue="@(s => s.Spec.Id.ToString())"
            OptionText="@(s => s.Spec.Name)"
            @bind-Value="@SelectedValue"
            @bind-SelectedOption="@SelectedItem">
                <OptionTemplate>
                     <span style="font-size: 18px;">@context.Spec.Name</span>
                     <span style="font-size: 18px;">(@context.Count)</span>
                </OptionTemplate>
            </FluentListbox>
        }
        else
        {
            if (isOpen)
            {
                <FluentProgressRing />
            }
        }
    </FluentNavMenu>
</nav>

@code{
    private List<SpecStat> specsList;
    private List<int> countSpecs;
    private string selectedValue;
    private string SelectedValue 
    {
        get
        {
            return selectedValue;
        }
        set
        {
            selectedValue = value;
            Navigation.NavigateTo($"/professional/{selectedValue}/search");
        }

    }
    private SpecStat SelectedItem {get; set;}

    private bool isOpen;

    private string? role = "2";
    private string? userId = "0";

    protected override async Task OnInitializedAsync()
    {
        specsList = (await ProfessionalAPI.GetSpecStats()).ToList();

        if (!String.IsNullOrEmpty(await JsRuntime.InvokeAsync<string>("getToken")))
        {
            var tokenHandler = new JwtSecurityTokenHandler();

            // Получение токена
            var jwtToken = tokenHandler.ReadJwtToken(await JsRuntime.InvokeAsync<string>("getToken"));

            // Получение роли из токена
            var roleClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "role");
            role = roleClaim is not null ? roleClaim.Value : "2";

            var idClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "nameid");
            userId = idClaim is not null ? idClaim.Value : "0";
        }
    }

    private void FindBySpec()
    {
        Navigation.NavigateTo($"/professional/{SelectedValue}/search");
    }
}