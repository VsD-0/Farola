@using Farola.API
@using Farola.Infrastructure.Handlers
@using Farola.Infrastructure.Models
@using System.IdentityModel.Tokens.Jwt
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject IUserClient UserAPI

<FluentDialogProvider />
<FluentToastProvider />

<FluentLayout>
    <FluentHeader>
        Farola
        <FluentStack HorizontalAlignment="HorizontalAlignment.End">  
            <FluentLabel Color="Color.Fill" Typo="Typography.H4">@(CurrentUser.Role == "1" ? "Специалист " : "") @CurrentUser.UserName</FluentLabel>
            <FluentButton id="auth_menu" IconStart="@(new Icons.Filled.Size48.Person())" Appearance="Appearance.Accent" @onclick="@(() => open = !open)">
            </FluentButton>
            <FluentMenu Anchor="auth_menu" @bind-Open="open" VerticalThreshold="170">
                <FluentNavMenu Style="color: black" Width="250">
                    @if (CurrentUser.Id == null)
                    {
                        <FluentNavLink Href="/user/signin">Войти</FluentNavLink>
                        <FluentNavGroup Title="Зарегистрироваться">
                            <ChildContent>
                            <FluentNavLink Href="/applicant/signup" IconColor="Color.Accent">Пользователь</FluentNavLink>
                            <FluentNavLink Href="/professional/signup" IconColor="Color.Accent">Специалист</FluentNavLink>
                        </ChildContent>
                        </FluentNavGroup>
                    }
                    else
                    {
                        <FluentNavLink Href="@($"/statements/{CurrentUser.Id}")" IconColor="Color.Accent">Заявления</FluentNavLink>
                        <FluentMenuItem OnClick="SignOut">Выйти</FluentMenuItem>
                    }
                </FluentNavMenu>
            </FluentMenu>
        </FluentStack>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent>
            <ErrorBoundary>
                <ChildContent>
                    <div class="content">
                        @Body
                    </div>
                </ChildContent>
                <ErrorContent Context="ex">
                    <div class="blazor-error-boundary">@ex.Message</div>
                </ErrorContent>
            </ErrorBoundary>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
    </FluentFooter>
</FluentLayout>

@code {
    bool open = false;
    bool expanded = true;

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(await JsRuntime.InvokeAsync<string?>("getToken")))
        {
            TokenStorage.Token = await JsRuntime.InvokeAsync<string>("getToken");
            var tokenHandler = new JwtSecurityTokenHandler();

            var jwtToken = tokenHandler.ReadJwtToken(await JsRuntime.InvokeAsync<string>("getToken"));

            var roleClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "role");
            var role = roleClaim is not null ? roleClaim.Value : "2";

            var idClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "nameid");
            var clientId = idClaim is not null ? idClaim.Value : "0";
            CurrentUser.Id = clientId;
            CurrentUser.Role = role;
            var user = await UserAPI.GetUserById(int.Parse(clientId));
            CurrentUser.UserName = $"{user.Surname} {user.Name} {user.Patronymic}";
        }
    }

    private async Task SignOut()
    {
        CurrentUser.Id = null;
        CurrentUser.UserName = null;
        CurrentUser.Role = null;

        TokenStorage.Token = null;
        await JsRuntime.InvokeVoidAsync("setToken", null);

        Navigation.NavigateTo("/");
    }
}